name: Windows 2019

on: [push, pull_request]

jobs:
  Windows:
    name: Windows
    runs-on: windows-2019
    steps:
    - name: Check out
      uses: actions/checkout@v2
    - name: Set Visual Studio up
      shell: bash
      run: |
        set -x
        cd '/c/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build'
        echo 'export -p > exported_environment.sh' > nested_bash.sh
        echo 'vcvarsall.bat x64 && "C:/Program Files/Git/usr/bin/bash" -c ./nested_bash.sh' > export_environment.bat
        cmd "/c export_environment.bat"
        set +x
        source ./exported_environment.sh
        set -x
        echo "PATH=${PATH}" >> $GITHUB_ENV
        echo "UniversalCRTSdkDir=${UniversalCRTSdkDir}" >> $GITHUB_ENV
        echo "UCRTVersion=${UCRTVersion}" >> $GITHUB_ENV
        echo "VCToolsInstallDir=${VCToolsInstallDir}" >> $GITHUB_ENV
    - name: Install Swift
      shell: bash
      run: |
        set -x
        curl --location \
          'https://swift.org/builds/swift-5.3-release/windows10/swift-5.3-RELEASE/swift-5.3-RELEASE-windows10.exe' \
          --output '/tmp/swift-5.3-RELEASE-windows10.exe'
        /tmp/swift-5.3-RELEASE-windows10.exe //passive
        export SDKROOT="/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk"
        echo "SDKROOT=${SDKROOT}" >> $GITHUB_ENV
        cp "${SDKROOT}/usr/share/ucrt.modulemap" "${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt/module.modulemap"
        cp "${SDKROOT}/usr/share/visualc.modulemap" "${VCToolsInstallDir}/include/module.modulemap"
        cp "${SDKROOT}/usr/share/visualc.apinotes" "${VCToolsInstallDir}/include/visualc.apinotes"
        cp "${SDKROOT}/usr/share/winsdk.modulemap" "${UniversalCRTSdkDir}/Include/${UCRTVersion}/um/module.modulemap"
        export PATH="/c/Library/icu-67/usr/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        export PATH="/c/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        export PATH="/c/Library/Swift-development/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        export PATH="/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        swift --version
    - name: Install Linux
      shell: bash
      run: |
        set -x
        mkdir -p .build/tmp
        curl --location \
          'https://aka.ms/wslubuntu2004' \
          --output '.build/tmp/wslubuntu2004'
        7z x .build/tmp/wslubuntu2004 -o.build/Linux/Ubuntu
        export PATH="$(pwd)/.build/Linux/Ubuntu:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        ubuntu2004 install --root
    - name: Install SwiftPM dependencies
      shell: bash
      run: |
        set -x
        ubuntu2004 run \
          apt-get update --assume-yes
        ubuntu2004 run \
          UCF_FORCE_CONFOLD=1 DEBIAN_FRONTEND=noninteractive \
          apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" \
            install --assume-yes \
              binutils \
              git \
              gnupg2 \
              libc6-dev \
              libcurl4 \
              libedit2 \
              libgcc-9-dev \
              libpython2.7 \
              libsqlite3-0 \
              libstdc++-9-dev \
              libxml2 \
              libz3-dev \
              lld-10 \
              pkg-config \
              tzdata \
              zlib1g-dev
        ubuntu2004 run \
          ln -s //usr/bin/lld-link-10 //usr/bin/lld-link
    - name: Install SwiftPM
      shell: bash
      run: |
        set -x
        ubuntu2004 run \
          mkdir -p /tmp
        ubuntu2004 run \
          curl --location \
            'https://swift.org/builds/swift-5.3-release/ubuntu2004/swift-5.3-RELEASE/swift-5.3-RELEASE-ubuntu20.04.tar.gz' \
            --output '/tmp/swift-5.3-RELEASE-ubuntu20.04.tar.gz'
        ubuntu2004 run \
          tar --extract --force-local --file /tmp/swift-5.3-RELEASE-ubuntu20.04.tar.gz --directory /tmp
        ubuntu2004 run \
          mkdir -p /
        ubuntu2004 run \
          cp -R /tmp/swift-5.3-RELEASE-ubuntu20.04/usr //
        ubuntu2004 run \
          swift --version
    - name: Prepare project for Windows CI
      shell: bash
      run: |
        cp Scripts/Package_windows.swift Package.swift
        cp Scripts/test_windows.swift Tests/main.swift
        rm Tests/LinuxMain.swift
    - name: Build
      shell: bash
      run: |
        set -x
        export WSLENV=UniversalCRTSdkDir/p:UCRTVersion:VCToolsInstallDir/p
        ubuntu2004 run \
          TARGETING_WINDOWS='true' \
          swift build --destination .github/workflows/sdk.json \
            --configuration release -Xswiftc -enable-testing \
            -Xswiftc -use-ld=lld \
            -Xswiftc -sdk -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk \
            -Xswiftc -resource-dir -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/SDKs/Windows.sdk/usr/lib/swift/windows/x86_64 \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/ucrt"' \
            -Xswiftc -L -Xswiftc '"/${UniversalCRTSdkDir}/lib/${UCRTVersion}/ucrt/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${VCToolsInstallDir}/include"' \
            -Xcc -isystem -Xcc '"/${VCToolsInstallDir}/include"' \
            -Xswiftc -L -Xswiftc '"/${VCToolsInstallDir}/lib/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/um"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/um"' \
            -Xswiftc -L -Xswiftc '"/${UniversalCRTSdkDir}/lib/${UCRTVersion}/um/x64"' \
            -Xswiftc -Xcc -Xswiftc -isystem -Xswiftc -Xcc -Xswiftc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/shared"' \
            -Xcc -isystem -Xcc '"/${UniversalCRTSdkDir}/Include/${UCRTVersion}/shared"' \
            -Xswiftc -I -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/lib/swift/windows/x86_64 \
            -Xswiftc -L -Xswiftc //mnt/c/Library/Developer/Platforms/Windows.platform/Developer/Library/XCTest-development/usr/lib/swift/windows
    - name: Test
      shell: bash
      run: |
        set -x
        export PATH=$(echo -n $PATH | awk -v RS=: -v ORS=: '!($0 in a) {a[$0]; print $0}')
        .build/x86_64-unknown-windows-msvc/release/WindowsTests.exe
