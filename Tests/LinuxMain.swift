// Generated using Sourcery 0.13.1 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT

import XCTest
@testable import PathosTests

extension ChildrenTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = ChildrenTests, isGeneric = false, localName = ChildrenTests, variables = [], methods = [Method: name = testChildrenInPath(), selectorName = testChildrenInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testChildrenRecursiveInPath(), selectorName = testChildrenRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testFilesInPath(), selectorName = testFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testFilesRecursiveInPath(), selectorName = testFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testDirectoriesInPath(), selectorName = testDirectoriesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testDirectoriesRecursiveInPath(), selectorName = testDirectoriesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSymbolicLinksInPath(), selectorName = testSymbolicLinksInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSymbolicLinksRecursiveInPath(), selectorName = testSymbolicLinksRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableChildrenInPath(), selectorName = testPathRepresentableChildrenInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableChildrenRecursiveInPath(), selectorName = testPathRepresentableChildrenRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableFilesInPath(), selectorName = testPathRepresentableFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableFilesRecursiveInPath(), selectorName = testPathRepresentableFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableDirectoriesInPath(), selectorName = testPathRepresentableDirectoriesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableDirectoriesRecursiveInPath(), selectorName = testPathRepresentableDirectoriesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSymbolicLinksInPath(), selectorName = testPathRepresentableSymbolicLinksInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSymbolicLinksRecursiveInPath(), selectorName = testPathRepresentableSymbolicLinksRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testUnknownTypeFilesInPath(), selectorName = testUnknownTypeFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testUnknownTypeFilesRecursiveInPath(), selectorName = testUnknownTypeFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableUnknownTypeFilesInPath(), selectorName = testPathRepresentableUnknownTypeFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableUnknownTypeFilesRecursiveInPath(), selectorName = testPathRepresentableUnknownTypeFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPipesInPath(), selectorName = testPipesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPipesRecursiveInPath(), selectorName = testPipesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentablePipesInPath(), selectorName = testPathRepresentablePipesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentablePipesRecursiveInPath(), selectorName = testPathRepresentablePipesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testCharacterDevicesInPath(), selectorName = testCharacterDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testCharacterDevicesRecursiveInPath(), selectorName = testCharacterDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableCharacterDevicesInPath(), selectorName = testPathRepresentableCharacterDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableCharacterDevicesRecursiveInPath(), selectorName = testPathRepresentableCharacterDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testBlockDevicesInPath(), selectorName = testBlockDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testBlockDevicesRecursiveInPath(), selectorName = testBlockDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableBlockDevicesInPath(), selectorName = testPathRepresentableBlockDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableBlockDevicesRecursiveInPath(), selectorName = testPathRepresentableBlockDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSocketsInPath(), selectorName = testSocketsInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSocketsRecursiveInPath(), selectorName = testSocketsRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSocketsInPath(), selectorName = testPathRepresentableSocketsInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSocketsRecursiveInPath(), selectorName = testPathRepresentableSocketsRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testChildrenInPath(), selectorName = testChildrenInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testChildrenRecursiveInPath(), selectorName = testChildrenRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testFilesInPath(), selectorName = testFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testFilesRecursiveInPath(), selectorName = testFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testDirectoriesInPath(), selectorName = testDirectoriesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testDirectoriesRecursiveInPath(), selectorName = testDirectoriesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSymbolicLinksInPath(), selectorName = testSymbolicLinksInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSymbolicLinksRecursiveInPath(), selectorName = testSymbolicLinksRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableChildrenInPath(), selectorName = testPathRepresentableChildrenInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableChildrenRecursiveInPath(), selectorName = testPathRepresentableChildrenRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableFilesInPath(), selectorName = testPathRepresentableFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableFilesRecursiveInPath(), selectorName = testPathRepresentableFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableDirectoriesInPath(), selectorName = testPathRepresentableDirectoriesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableDirectoriesRecursiveInPath(), selectorName = testPathRepresentableDirectoriesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSymbolicLinksInPath(), selectorName = testPathRepresentableSymbolicLinksInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSymbolicLinksRecursiveInPath(), selectorName = testPathRepresentableSymbolicLinksRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testUnknownTypeFilesInPath(), selectorName = testUnknownTypeFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testUnknownTypeFilesRecursiveInPath(), selectorName = testUnknownTypeFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableUnknownTypeFilesInPath(), selectorName = testPathRepresentableUnknownTypeFilesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableUnknownTypeFilesRecursiveInPath(), selectorName = testPathRepresentableUnknownTypeFilesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPipesInPath(), selectorName = testPipesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPipesRecursiveInPath(), selectorName = testPipesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentablePipesInPath(), selectorName = testPathRepresentablePipesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentablePipesRecursiveInPath(), selectorName = testPathRepresentablePipesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testCharacterDevicesInPath(), selectorName = testCharacterDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testCharacterDevicesRecursiveInPath(), selectorName = testCharacterDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableCharacterDevicesInPath(), selectorName = testPathRepresentableCharacterDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableCharacterDevicesRecursiveInPath(), selectorName = testPathRepresentableCharacterDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testBlockDevicesInPath(), selectorName = testBlockDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testBlockDevicesRecursiveInPath(), selectorName = testBlockDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableBlockDevicesInPath(), selectorName = testPathRepresentableBlockDevicesInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableBlockDevicesRecursiveInPath(), selectorName = testPathRepresentableBlockDevicesRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSocketsInPath(), selectorName = testSocketsInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testSocketsRecursiveInPath(), selectorName = testSocketsRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSocketsInPath(), selectorName = testPathRepresentableSocketsInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:], Method: name = testPathRepresentableSocketsRecursiveInPath(), selectorName = testPathRepresentableSocketsRecursiveInPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ChildrenTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testChildrenInPath", testChildrenInPath),
            ("testChildrenRecursiveInPath", testChildrenRecursiveInPath),
            ("testFilesInPath", testFilesInPath),
            ("testFilesRecursiveInPath", testFilesRecursiveInPath),
            ("testDirectoriesInPath", testDirectoriesInPath),
            ("testDirectoriesRecursiveInPath", testDirectoriesRecursiveInPath),
            ("testSymbolicLinksInPath", testSymbolicLinksInPath),
            ("testSymbolicLinksRecursiveInPath", testSymbolicLinksRecursiveInPath),
            ("testPathRepresentableChildrenInPath", testPathRepresentableChildrenInPath),
            ("testPathRepresentableChildrenRecursiveInPath", testPathRepresentableChildrenRecursiveInPath),
            ("testPathRepresentableFilesInPath", testPathRepresentableFilesInPath),
            ("testPathRepresentableFilesRecursiveInPath", testPathRepresentableFilesRecursiveInPath),
            ("testPathRepresentableDirectoriesInPath", testPathRepresentableDirectoriesInPath),
            ("testPathRepresentableDirectoriesRecursiveInPath", testPathRepresentableDirectoriesRecursiveInPath),
            ("testPathRepresentableSymbolicLinksInPath", testPathRepresentableSymbolicLinksInPath),
            ("testPathRepresentableSymbolicLinksRecursiveInPath", testPathRepresentableSymbolicLinksRecursiveInPath),
            ("testUnknownTypeFilesInPath", testUnknownTypeFilesInPath),
            ("testUnknownTypeFilesRecursiveInPath", testUnknownTypeFilesRecursiveInPath),
            ("testPathRepresentableUnknownTypeFilesInPath", testPathRepresentableUnknownTypeFilesInPath),
            ("testPathRepresentableUnknownTypeFilesRecursiveInPath", testPathRepresentableUnknownTypeFilesRecursiveInPath),
            ("testPipesInPath", testPipesInPath),
            ("testPipesRecursiveInPath", testPipesRecursiveInPath),
            ("testPathRepresentablePipesInPath", testPathRepresentablePipesInPath),
            ("testPathRepresentablePipesRecursiveInPath", testPathRepresentablePipesRecursiveInPath),
            ("testCharacterDevicesInPath", testCharacterDevicesInPath),
            ("testCharacterDevicesRecursiveInPath", testCharacterDevicesRecursiveInPath),
            ("testPathRepresentableCharacterDevicesInPath", testPathRepresentableCharacterDevicesInPath),
            ("testPathRepresentableCharacterDevicesRecursiveInPath", testPathRepresentableCharacterDevicesRecursiveInPath),
            ("testBlockDevicesInPath", testBlockDevicesInPath),
            ("testBlockDevicesRecursiveInPath", testBlockDevicesRecursiveInPath),
            ("testPathRepresentableBlockDevicesInPath", testPathRepresentableBlockDevicesInPath),
            ("testPathRepresentableBlockDevicesRecursiveInPath", testPathRepresentableBlockDevicesRecursiveInPath),
            ("testSocketsInPath", testSocketsInPath),
            ("testSocketsRecursiveInPath", testSocketsRecursiveInPath),
            ("testPathRepresentableSocketsInPath", testPathRepresentableSocketsInPath),
            ("testPathRepresentableSocketsRecursiveInPath", testPathRepresentableSocketsRecursiveInPath),
        ]
    }
}
extension ExistsTest {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = ExistsTest, isGeneric = false, localName = ExistsTest, variables = [], methods = [Method: name = testExistingFiles(), selectorName = testExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testNonExistingFiles(), selectorName = testNonExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testExistingFilesFollowingSymbol(), selectorName = testExistingFilesFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testExistingFilesNotFollowingSymbol(), selectorName = testExistingFilesNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLink(), selectorName = testGoodSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLink(), selectorName = testGoodSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLink(), selectorName = testBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLinkFollowingSymbol(), selectorName = testGoodSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLinkFollowingSymbol(), selectorName = testGoodSymbolicDirectoryLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLinkFollowingSymbol(), selectorName = testBadSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLinkNotFollowingSymbol(), selectorName = testGoodSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLinkNotFollowingSymbol(), selectorName = testGoodSymbolicDirectoryLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLinkNotFollowingSymbol(), selectorName = testBadSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFiles(), selectorName = testPathRepresentableExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableNonExistingFiles(), selectorName = testPathRepresentableNonExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFileFollowingSymbol(), selectorName = testPathRepresentableExistingFileFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFileNotFollowingSymbol(), selectorName = testPathRepresentableExistingFileNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLink(), selectorName = testPathRepresentableGoodSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicDirectoryLink(), selectorName = testPathRepresentableGoodSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLink(), selectorName = testPathRepresentableBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLinkFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLinkFollowingSymbol(), selectorName = testPathRepresentableBadSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableBadSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testExistingFiles(), selectorName = testExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testNonExistingFiles(), selectorName = testNonExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testExistingFilesFollowingSymbol(), selectorName = testExistingFilesFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testExistingFilesNotFollowingSymbol(), selectorName = testExistingFilesNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLink(), selectorName = testGoodSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLink(), selectorName = testGoodSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLink(), selectorName = testBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLinkFollowingSymbol(), selectorName = testGoodSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLinkFollowingSymbol(), selectorName = testGoodSymbolicDirectoryLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLinkFollowingSymbol(), selectorName = testBadSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicLinkNotFollowingSymbol(), selectorName = testGoodSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testGoodSymbolicDirectoryLinkNotFollowingSymbol(), selectorName = testGoodSymbolicDirectoryLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testBadSymbolicLinkNotFollowingSymbol(), selectorName = testBadSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFiles(), selectorName = testPathRepresentableExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableNonExistingFiles(), selectorName = testPathRepresentableNonExistingFiles, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFileFollowingSymbol(), selectorName = testPathRepresentableExistingFileFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableExistingFileNotFollowingSymbol(), selectorName = testPathRepresentableExistingFileNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLink(), selectorName = testPathRepresentableGoodSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicDirectoryLink(), selectorName = testPathRepresentableGoodSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLink(), selectorName = testPathRepresentableBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLinkFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLinkFollowingSymbol(), selectorName = testPathRepresentableBadSymbolicLinkFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodSymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableGoodSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:], Method: name = testPathRepresentableBadSymbolicLinkNotFollowingSymbol(), selectorName = testPathRepresentableBadSymbolicLinkNotFollowingSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExistsTest), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testExistingFiles", testExistingFiles),
            ("testNonExistingFiles", testNonExistingFiles),
            ("testExistingFilesFollowingSymbol", testExistingFilesFollowingSymbol),
            ("testExistingFilesNotFollowingSymbol", testExistingFilesNotFollowingSymbol),
            ("testGoodSymbolicLink", testGoodSymbolicLink),
            ("testGoodSymbolicDirectoryLink", testGoodSymbolicDirectoryLink),
            ("testBadSymbolicLink", testBadSymbolicLink),
            ("testGoodSymbolicLinkFollowingSymbol", testGoodSymbolicLinkFollowingSymbol),
            ("testGoodSymbolicDirectoryLinkFollowingSymbol", testGoodSymbolicDirectoryLinkFollowingSymbol),
            ("testBadSymbolicLinkFollowingSymbol", testBadSymbolicLinkFollowingSymbol),
            ("testGoodSymbolicLinkNotFollowingSymbol", testGoodSymbolicLinkNotFollowingSymbol),
            ("testGoodSymbolicDirectoryLinkNotFollowingSymbol", testGoodSymbolicDirectoryLinkNotFollowingSymbol),
            ("testBadSymbolicLinkNotFollowingSymbol", testBadSymbolicLinkNotFollowingSymbol),
            ("testPathRepresentableExistingFiles", testPathRepresentableExistingFiles),
            ("testPathRepresentableNonExistingFiles", testPathRepresentableNonExistingFiles),
            ("testPathRepresentableExistingFileFollowingSymbol", testPathRepresentableExistingFileFollowingSymbol),
            ("testPathRepresentableExistingFileNotFollowingSymbol", testPathRepresentableExistingFileNotFollowingSymbol),
            ("testPathRepresentableGoodSymbolicLink", testPathRepresentableGoodSymbolicLink),
            ("testPathRepresentableGoodSymbolicDirectoryLink", testPathRepresentableGoodSymbolicDirectoryLink),
            ("testPathRepresentableBadSymbolicLink", testPathRepresentableBadSymbolicLink),
            ("testPathRepresentableGoodSymbolicLinkFollowingSymbol", testPathRepresentableGoodSymbolicLinkFollowingSymbol),
            ("testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol", testPathRepresentableGoodSymbolicDirectorcyLinkFollowingSymbol),
            ("testPathRepresentableBadSymbolicLinkFollowingSymbol", testPathRepresentableBadSymbolicLinkFollowingSymbol),
            ("testPathRepresentableGoodSymbolicLinkNotFollowingSymbol", testPathRepresentableGoodSymbolicLinkNotFollowingSymbol),
            ("testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol", testPathRepresentableGoodDirectorySymbolicLinkNotFollowingSymbol),
            ("testPathRepresentableBadSymbolicLinkNotFollowingSymbol", testPathRepresentableBadSymbolicLinkNotFollowingSymbol),
        ]
    }
}
extension ExpandUserDirectoryTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = ExpandUserDirectoryTests, isGeneric = false, localName = ExpandUserDirectoryTests, variables = [Variable: name = originalHome, typeName = UnsafeMutablePointer<Int8>?, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = Optional("nil"), annotations = [:], attributes = ["private": private], isFinal = false, definedInTypeName = Optional(ExpandUserDirectoryTests), actualDefinedInTypeName = Optional(ExpandUserDirectoryTests)], methods = [Method: name = setUp(), selectorName = setUp, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = tearDown(), selectorName = tearDown, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testExpandPathWithNoUser(), selectorName = testExpandPathWithNoUser, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testUserDirectoryExpandsToHomeEnvironment(), selectorName = testUserDirectoryExpandsToHomeEnvironment, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testSpecialHomeValue(), selectorName = testSpecialHomeValue, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testFallbackToPasswdDatabase(), selectorName = testFallbackToPasswdDatabase, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableExpandPathWithNoUser(), selectorName = testPathRepresentableExpandPathWithNoUser, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableUserDirectoryExpandsToHomeEnvironment(), selectorName = testPathRepresentableUserDirectoryExpandsToHomeEnvironment, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableSpecialHomeValue(), selectorName = testPathRepresentableSpecialHomeValue, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableFallbackToPasswdDatabase(), selectorName = testPathRepresentableFallbackToPasswdDatabase, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [Variable: name = originalHome, typeName = UnsafeMutablePointer<Int8>?, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = Optional("nil"), annotations = [:], attributes = ["private": private], isFinal = false, definedInTypeName = Optional(ExpandUserDirectoryTests), actualDefinedInTypeName = Optional(ExpandUserDirectoryTests)], instanceMethods = [Method: name = setUp(), selectorName = setUp, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = tearDown(), selectorName = tearDown, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testExpandPathWithNoUser(), selectorName = testExpandPathWithNoUser, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testUserDirectoryExpandsToHomeEnvironment(), selectorName = testUserDirectoryExpandsToHomeEnvironment, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testSpecialHomeValue(), selectorName = testSpecialHomeValue, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testFallbackToPasswdDatabase(), selectorName = testFallbackToPasswdDatabase, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableExpandPathWithNoUser(), selectorName = testPathRepresentableExpandPathWithNoUser, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableUserDirectoryExpandsToHomeEnvironment(), selectorName = testPathRepresentableUserDirectoryExpandsToHomeEnvironment, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableSpecialHomeValue(), selectorName = testPathRepresentableSpecialHomeValue, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:], Method: name = testPathRepresentableFallbackToPasswdDatabase(), selectorName = testPathRepresentableFallbackToPasswdDatabase, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ExpandUserDirectoryTests), attributes = [:]], computedVariables = [], storedVariables = [Variable: name = originalHome, typeName = UnsafeMutablePointer<Int8>?, isComputed = false, isStatic = false, readAccess = private, writeAccess = private, isMutable = true, defaultValue = Optional("nil"), annotations = [:], attributes = ["private": private], isFinal = false, definedInTypeName = Optional(ExpandUserDirectoryTests), actualDefinedInTypeName = Optional(ExpandUserDirectoryTests)], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testExpandPathWithNoUser", testExpandPathWithNoUser),
            ("testUserDirectoryExpandsToHomeEnvironment", testUserDirectoryExpandsToHomeEnvironment),
            ("testSpecialHomeValue", testSpecialHomeValue),
            ("testFallbackToPasswdDatabase", testFallbackToPasswdDatabase),
            ("testPathRepresentableExpandPathWithNoUser", testPathRepresentableExpandPathWithNoUser),
            ("testPathRepresentableUserDirectoryExpandsToHomeEnvironment", testPathRepresentableUserDirectoryExpandsToHomeEnvironment),
            ("testPathRepresentableSpecialHomeValue", testPathRepresentableSpecialHomeValue),
            ("testPathRepresentableFallbackToPasswdDatabase", testPathRepresentableFallbackToPasswdDatabase),
        ]
    }
}
extension FileExtensionTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = FileExtensionTests, isGeneric = false, localName = FileExtensionTests, variables = [], methods = [Method: name = testFileExtensionOnSimplePath(), selectorName = testFileExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithMultipleDots(), selectorName = testFileExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDot(), selectorName = testFileExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithNoDots(), selectorName = testFileExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testFileExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testFileExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testFileExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDots(), selectorName = testFileExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithOnlyDots(), selectorName = testFileExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnEmptyPath(), selectorName = testFileExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnSimplePath(), selectorName = testPathRepresentableFileExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithMultipleDots(), selectorName = testPathRepresentableFileExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDot(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithNoDots(), selectorName = testPathRepresentableFileExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDots(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithOnlyDots(), selectorName = testPathRepresentableFileExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnEmptyPath(), selectorName = testPathRepresentableFileExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testFileExtensionOnSimplePath(), selectorName = testFileExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithMultipleDots(), selectorName = testFileExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDot(), selectorName = testFileExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithNoDots(), selectorName = testFileExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testFileExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testFileExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testFileExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithLeadingDots(), selectorName = testFileExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnPathWithOnlyDots(), selectorName = testFileExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testFileExtensionOnEmptyPath(), selectorName = testFileExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnSimplePath(), selectorName = testPathRepresentableFileExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithMultipleDots(), selectorName = testPathRepresentableFileExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDot(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithNoDots(), selectorName = testPathRepresentableFileExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithLeadingDots(), selectorName = testPathRepresentableFileExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnPathWithOnlyDots(), selectorName = testPathRepresentableFileExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:], Method: name = testPathRepresentableFileExtensionOnEmptyPath(), selectorName = testPathRepresentableFileExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FileExtensionTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testFileExtensionOnSimplePath", testFileExtensionOnSimplePath),
            ("testFileExtensionOnPathWithMultipleDots", testFileExtensionOnPathWithMultipleDots),
            ("testFileExtensionOnPathWithLeadingDot", testFileExtensionOnPathWithLeadingDot),
            ("testFileExtensionOnPathWithNoDots", testFileExtensionOnPathWithNoDots),
            ("testFileExtensionOnPathWithLeadingDotButNoExtension", testFileExtensionOnPathWithLeadingDotButNoExtension),
            ("testFileExtensionOnPathWithManyLeadingDotsButNoExtension", testFileExtensionOnPathWithManyLeadingDotsButNoExtension),
            ("testFileExtensionOnPathWithLeadingDotsButNoExtension", testFileExtensionOnPathWithLeadingDotsButNoExtension),
            ("testFileExtensionOnPathWithLeadingDots", testFileExtensionOnPathWithLeadingDots),
            ("testFileExtensionOnPathWithOnlyDots", testFileExtensionOnPathWithOnlyDots),
            ("testFileExtensionOnEmptyPath", testFileExtensionOnEmptyPath),
            ("testPathRepresentableFileExtensionOnSimplePath", testPathRepresentableFileExtensionOnSimplePath),
            ("testPathRepresentableFileExtensionOnPathWithMultipleDots", testPathRepresentableFileExtensionOnPathWithMultipleDots),
            ("testPathRepresentableFileExtensionOnPathWithLeadingDot", testPathRepresentableFileExtensionOnPathWithLeadingDot),
            ("testPathRepresentableFileExtensionOnPathWithNoDots", testPathRepresentableFileExtensionOnPathWithNoDots),
            ("testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension", testPathRepresentableFileExtensionOnPathWithLeadingDotButNoExtension),
            ("testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension", testPathRepresentableFileExtensionOnPathWithManyLeadingDotsButNoExtension),
            ("testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension", testPathRepresentableFileExtensionOnPathWithLeadingDotsButNoExtension),
            ("testPathRepresentableFileExtensionOnPathWithLeadingDots", testPathRepresentableFileExtensionOnPathWithLeadingDots),
            ("testPathRepresentableFileExtensionOnPathWithOnlyDots", testPathRepresentableFileExtensionOnPathWithOnlyDots),
            ("testPathRepresentableFileExtensionOnEmptyPath", testPathRepresentableFileExtensionOnEmptyPath),
        ]
    }
}
extension FixtureTestCase {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = FixtureTestCase, isGeneric = false, localName = FixtureTestCase, variables = [Variable: name = fixtureRoot, typeName = normalize, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("normalize(path: \"\\(#file)/../Fixtures\")"), annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childFiles, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectories, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinks, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childFilesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectoriesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinksRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase)], methods = [Method: name = fixture(_ path: FixturePath), selectorName = fixture(_:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = String, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:], Method: name = fixturePath(_ path: FixturePath), selectorName = fixturePath(_:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Path, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:], Method: name = expectedSize(of fixture: FixturePath), selectorName = expectedSize(of:), parameters = [MethodParameter: argumentLabel = Optional("of"), name = fixture, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Int64, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [Variable: name = fixtureRoot, typeName = normalize, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("normalize(path: \"\\(#file)/../Fixtures\")"), annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childFiles, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectories, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinks, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childFilesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectoriesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinksRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase)], instanceMethods = [Method: name = fixture(_ path: FixturePath), selectorName = fixture(_:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = String, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:], Method: name = fixturePath(_ path: FixturePath), selectorName = fixturePath(_:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Path, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:], Method: name = expectedSize(of fixture: FixturePath), selectorName = expectedSize(of:), parameters = [MethodParameter: argumentLabel = Optional("of"), name = fixture, typeName = FixturePath, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:]], returnTypeName = Int64, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(FixtureTestCase), attributes = [:]], computedVariables = [Variable: name = childFiles, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectories, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinks, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childFilesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childDirectoriesRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase), Variable: name = childSymbolicLinksRecursive, typeName = Set<String>, isComputed = true, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = nil, annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase)], storedVariables = [Variable: name = fixtureRoot, typeName = normalize, isComputed = false, isStatic = false, readAccess = internal, writeAccess = , isMutable = false, defaultValue = Optional("normalize(path: \"\\(#file)/../Fixtures\")"), annotations = [:], attributes = [:], isFinal = false, definedInTypeName = Optional(FixtureTestCase), actualDefinedInTypeName = Optional(FixtureTestCase)], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = [:], kind = class, isFinal = false) -> () -> Void)] {
        return [
        ]
    }
}
extension IsAbsoluteTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsAbsoluteTests, isGeneric = false, localName = IsAbsoluteTests, variables = [], methods = [Method: name = testIsAbsolutePath(), selectorName = testIsAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsAbsoluteTests), attributes = [:], Method: name = testPathRepresentableIsAbsolute(), selectorName = testPathRepresentableIsAbsolute, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsAbsoluteTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsAbsolutePath(), selectorName = testIsAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsAbsoluteTests), attributes = [:], Method: name = testPathRepresentableIsAbsolute(), selectorName = testPathRepresentableIsAbsolute, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsAbsoluteTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsAbsolutePath", testIsAbsolutePath),
            ("testPathRepresentableIsAbsolute", testPathRepresentableIsAbsolute),
        ]
    }
}
extension IsBlockDeviceTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsBlockDeviceTests, isGeneric = false, localName = IsBlockDeviceTests, variables = [], methods = [Method: name = testIsBlockDeviceOnExistingFile(), selectorName = testIsBlockDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnExistingDirectory(), selectorName = testIsBlockDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnNonExistingPath(), selectorName = testIsBlockDeviceOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnSymbolicLink(), selectorName = testIsBlockDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnSymbolicDirectoryLink(), selectorName = testIsBlockDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnBadSymbolicLink(), selectorName = testIsBlockDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnExistingFile(), selectorName = testFileRepresentableIsBlockDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnExistingDirectory(), selectorName = testFileRepresentableIsBlockDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnNonExistingFile(), selectorName = testFileRepresentableIsBlockDeviceOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsBlockDeviceOnSymbolicLink(), selectorName = testPathRerpesentableIsBlockDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsBlockDeviceOnBadSymbolicLink(), selectorName = testPathRerpesentableIsBlockDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsBlockDeviceOnExistingFile(), selectorName = testIsBlockDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnExistingDirectory(), selectorName = testIsBlockDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnNonExistingPath(), selectorName = testIsBlockDeviceOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnSymbolicLink(), selectorName = testIsBlockDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnSymbolicDirectoryLink(), selectorName = testIsBlockDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testIsBlockDeviceOnBadSymbolicLink(), selectorName = testIsBlockDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnExistingFile(), selectorName = testFileRepresentableIsBlockDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnExistingDirectory(), selectorName = testFileRepresentableIsBlockDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testFileRepresentableIsBlockDeviceOnNonExistingFile(), selectorName = testFileRepresentableIsBlockDeviceOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsBlockDeviceOnSymbolicLink(), selectorName = testPathRerpesentableIsBlockDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsBlockDeviceOnBadSymbolicLink(), selectorName = testPathRerpesentableIsBlockDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsBlockDeviceTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsBlockDeviceOnExistingFile", testIsBlockDeviceOnExistingFile),
            ("testIsBlockDeviceOnExistingDirectory", testIsBlockDeviceOnExistingDirectory),
            ("testIsBlockDeviceOnNonExistingPath", testIsBlockDeviceOnNonExistingPath),
            ("testIsBlockDeviceOnSymbolicLink", testIsBlockDeviceOnSymbolicLink),
            ("testIsBlockDeviceOnSymbolicDirectoryLink", testIsBlockDeviceOnSymbolicDirectoryLink),
            ("testIsBlockDeviceOnBadSymbolicLink", testIsBlockDeviceOnBadSymbolicLink),
            ("testFileRepresentableIsBlockDeviceOnExistingFile", testFileRepresentableIsBlockDeviceOnExistingFile),
            ("testFileRepresentableIsBlockDeviceOnExistingDirectory", testFileRepresentableIsBlockDeviceOnExistingDirectory),
            ("testFileRepresentableIsBlockDeviceOnNonExistingFile", testFileRepresentableIsBlockDeviceOnNonExistingFile),
            ("testPathRerpesentableIsBlockDeviceOnSymbolicLink", testPathRerpesentableIsBlockDeviceOnSymbolicLink),
            ("testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink", testPathRepresentableIsBlockDeviceOnSymbolicDirectoryLink),
            ("testPathRerpesentableIsBlockDeviceOnBadSymbolicLink", testPathRerpesentableIsBlockDeviceOnBadSymbolicLink),
        ]
    }
}
extension IsCharacterDeviceTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsCharacterDeviceTests, isGeneric = false, localName = IsCharacterDeviceTests, variables = [], methods = [Method: name = testIsCharacterDeviceOnExistingFile(), selectorName = testIsCharacterDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnExistingDirectory(), selectorName = testIsCharacterDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnNonExistingPath(), selectorName = testIsCharacterDeviceOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnSymbolicLink(), selectorName = testIsCharacterDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnSymbolicDirectoryLink(), selectorName = testIsCharacterDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnBadSymbolicLink(), selectorName = testIsCharacterDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnExistingFile(), selectorName = testFileRepresentableIsCharacterDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnExistingDirectory(), selectorName = testFileRepresentableIsCharacterDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnNonExistingFile(), selectorName = testFileRepresentableIsCharacterDeviceOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsCharacterDeviceOnSymbolicLink(), selectorName = testPathRerpesentableIsCharacterDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink(), selectorName = testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsCharacterDeviceOnExistingFile(), selectorName = testIsCharacterDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnExistingDirectory(), selectorName = testIsCharacterDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnNonExistingPath(), selectorName = testIsCharacterDeviceOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnSymbolicLink(), selectorName = testIsCharacterDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnSymbolicDirectoryLink(), selectorName = testIsCharacterDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testIsCharacterDeviceOnBadSymbolicLink(), selectorName = testIsCharacterDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnExistingFile(), selectorName = testFileRepresentableIsCharacterDeviceOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnExistingDirectory(), selectorName = testFileRepresentableIsCharacterDeviceOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testFileRepresentableIsCharacterDeviceOnNonExistingFile(), selectorName = testFileRepresentableIsCharacterDeviceOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsCharacterDeviceOnSymbolicLink(), selectorName = testPathRerpesentableIsCharacterDeviceOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:], Method: name = testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink(), selectorName = testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsCharacterDeviceTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsCharacterDeviceOnExistingFile", testIsCharacterDeviceOnExistingFile),
            ("testIsCharacterDeviceOnExistingDirectory", testIsCharacterDeviceOnExistingDirectory),
            ("testIsCharacterDeviceOnNonExistingPath", testIsCharacterDeviceOnNonExistingPath),
            ("testIsCharacterDeviceOnSymbolicLink", testIsCharacterDeviceOnSymbolicLink),
            ("testIsCharacterDeviceOnSymbolicDirectoryLink", testIsCharacterDeviceOnSymbolicDirectoryLink),
            ("testIsCharacterDeviceOnBadSymbolicLink", testIsCharacterDeviceOnBadSymbolicLink),
            ("testFileRepresentableIsCharacterDeviceOnExistingFile", testFileRepresentableIsCharacterDeviceOnExistingFile),
            ("testFileRepresentableIsCharacterDeviceOnExistingDirectory", testFileRepresentableIsCharacterDeviceOnExistingDirectory),
            ("testFileRepresentableIsCharacterDeviceOnNonExistingFile", testFileRepresentableIsCharacterDeviceOnNonExistingFile),
            ("testPathRerpesentableIsCharacterDeviceOnSymbolicLink", testPathRerpesentableIsCharacterDeviceOnSymbolicLink),
            ("testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink", testPathRepresentableIsCharacterDeviceOnSymbolicDirectoryLink),
            ("testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink", testPathRerpesentableIsCharacterDeviceOnBadSymbolicLink),
        ]
    }
}
extension IsDirectoryTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsDirectoryTests, isGeneric = false, localName = IsDirectoryTests, variables = [], methods = [Method: name = testIsDirectoryOnExistingFile(), selectorName = testIsDirectoryOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnExistingDirectory(), selectorName = testIsDirectoryOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnNonExistingPath(), selectorName = testIsDirectoryOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnSymbolicLink(), selectorName = testIsDirectoryOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnSymbolicDirectoryLink(), selectorName = testIsDirectoryOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnBadSymbolicLink(), selectorName = testIsDirectoryOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnExistingFile(), selectorName = testDirectoryRepresentableIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnExistingDirectory(), selectorName = testDirectoryRepresentableIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnNonExistingFile(), selectorName = testDirectoryRepresentableIsFileOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnSymbolicLink(), selectorName = testPathRepresentableIsDirectoryOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsDirectoryOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnBadSymbolicLink(), selectorName = testPathRepresentableIsDirectoryOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsDirectoryOnExistingFile(), selectorName = testIsDirectoryOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnExistingDirectory(), selectorName = testIsDirectoryOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnNonExistingPath(), selectorName = testIsDirectoryOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnSymbolicLink(), selectorName = testIsDirectoryOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnSymbolicDirectoryLink(), selectorName = testIsDirectoryOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testIsDirectoryOnBadSymbolicLink(), selectorName = testIsDirectoryOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnExistingFile(), selectorName = testDirectoryRepresentableIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnExistingDirectory(), selectorName = testDirectoryRepresentableIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testDirectoryRepresentableIsFileOnNonExistingFile(), selectorName = testDirectoryRepresentableIsFileOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnSymbolicLink(), selectorName = testPathRepresentableIsDirectoryOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsDirectoryOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:], Method: name = testPathRepresentableIsDirectoryOnBadSymbolicLink(), selectorName = testPathRepresentableIsDirectoryOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsDirectoryTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsDirectoryOnExistingFile", testIsDirectoryOnExistingFile),
            ("testIsDirectoryOnExistingDirectory", testIsDirectoryOnExistingDirectory),
            ("testIsDirectoryOnNonExistingPath", testIsDirectoryOnNonExistingPath),
            ("testIsDirectoryOnSymbolicLink", testIsDirectoryOnSymbolicLink),
            ("testIsDirectoryOnSymbolicDirectoryLink", testIsDirectoryOnSymbolicDirectoryLink),
            ("testIsDirectoryOnBadSymbolicLink", testIsDirectoryOnBadSymbolicLink),
            ("testDirectoryRepresentableIsFileOnExistingFile", testDirectoryRepresentableIsFileOnExistingFile),
            ("testDirectoryRepresentableIsFileOnExistingDirectory", testDirectoryRepresentableIsFileOnExistingDirectory),
            ("testDirectoryRepresentableIsFileOnNonExistingFile", testDirectoryRepresentableIsFileOnNonExistingFile),
            ("testPathRepresentableIsDirectoryOnSymbolicLink", testPathRepresentableIsDirectoryOnSymbolicLink),
            ("testPathRepresentableIsDirectoryOnSymbolicDirectoryLink", testPathRepresentableIsDirectoryOnSymbolicDirectoryLink),
            ("testPathRepresentableIsDirectoryOnBadSymbolicLink", testPathRepresentableIsDirectoryOnBadSymbolicLink),
        ]
    }
}
extension IsFileTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsFileTests, isGeneric = false, localName = IsFileTests, variables = [], methods = [Method: name = testIsFileOnExistingFile(), selectorName = testIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnExistingDirectory(), selectorName = testIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnNonExistingPath(), selectorName = testIsFileOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnSymbolicLink(), selectorName = testIsFileOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnSymbolicDirectoryLink(), selectorName = testIsFileOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnBadSymbolicLink(), selectorName = testIsFileOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnExistingFile(), selectorName = testFileRepresentableIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnExistingDirectory(), selectorName = testFileRepresentableIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnNonExistingFile(), selectorName = testFileRepresentableIsFileOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRerpesentableIsFileOnSymbolicLink(), selectorName = testPathRerpesentableIsFileOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRepresentableIsFileOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsFileOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRerpesentableIsFileOnBadSymbolicLink(), selectorName = testPathRerpesentableIsFileOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsFileOnExistingFile(), selectorName = testIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnExistingDirectory(), selectorName = testIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnNonExistingPath(), selectorName = testIsFileOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnSymbolicLink(), selectorName = testIsFileOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnSymbolicDirectoryLink(), selectorName = testIsFileOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testIsFileOnBadSymbolicLink(), selectorName = testIsFileOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnExistingFile(), selectorName = testFileRepresentableIsFileOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnExistingDirectory(), selectorName = testFileRepresentableIsFileOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testFileRepresentableIsFileOnNonExistingFile(), selectorName = testFileRepresentableIsFileOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRerpesentableIsFileOnSymbolicLink(), selectorName = testPathRerpesentableIsFileOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRepresentableIsFileOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsFileOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:], Method: name = testPathRerpesentableIsFileOnBadSymbolicLink(), selectorName = testPathRerpesentableIsFileOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsFileTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsFileOnExistingFile", testIsFileOnExistingFile),
            ("testIsFileOnExistingDirectory", testIsFileOnExistingDirectory),
            ("testIsFileOnNonExistingPath", testIsFileOnNonExistingPath),
            ("testIsFileOnSymbolicLink", testIsFileOnSymbolicLink),
            ("testIsFileOnSymbolicDirectoryLink", testIsFileOnSymbolicDirectoryLink),
            ("testIsFileOnBadSymbolicLink", testIsFileOnBadSymbolicLink),
            ("testFileRepresentableIsFileOnExistingFile", testFileRepresentableIsFileOnExistingFile),
            ("testFileRepresentableIsFileOnExistingDirectory", testFileRepresentableIsFileOnExistingDirectory),
            ("testFileRepresentableIsFileOnNonExistingFile", testFileRepresentableIsFileOnNonExistingFile),
            ("testPathRerpesentableIsFileOnSymbolicLink", testPathRerpesentableIsFileOnSymbolicLink),
            ("testPathRepresentableIsFileOnSymbolicDirectoryLink", testPathRepresentableIsFileOnSymbolicDirectoryLink),
            ("testPathRerpesentableIsFileOnBadSymbolicLink", testPathRerpesentableIsFileOnBadSymbolicLink),
        ]
    }
}
extension IsPipeTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsPipeTests, isGeneric = false, localName = IsPipeTests, variables = [], methods = [Method: name = testIsPipeOnExistingFile(), selectorName = testIsPipeOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnExistingDirectory(), selectorName = testIsPipeOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnNonExistingPath(), selectorName = testIsPipeOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnSymbolicLink(), selectorName = testIsPipeOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnSymbolicDirectoryLink(), selectorName = testIsPipeOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnBadSymbolicLink(), selectorName = testIsPipeOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnExistingFile(), selectorName = testFileRepresentableIsPipeOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnExistingDirectory(), selectorName = testFileRepresentableIsPipeOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnNonExistingFile(), selectorName = testFileRepresentableIsPipeOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRerpesentableIsPipeOnSymbolicLink(), selectorName = testPathRerpesentableIsPipeOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRepresentableIsPipeOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsPipeOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRerpesentableIsPipeOnBadSymbolicLink(), selectorName = testPathRerpesentableIsPipeOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsPipeOnExistingFile(), selectorName = testIsPipeOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnExistingDirectory(), selectorName = testIsPipeOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnNonExistingPath(), selectorName = testIsPipeOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnSymbolicLink(), selectorName = testIsPipeOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnSymbolicDirectoryLink(), selectorName = testIsPipeOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testIsPipeOnBadSymbolicLink(), selectorName = testIsPipeOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnExistingFile(), selectorName = testFileRepresentableIsPipeOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnExistingDirectory(), selectorName = testFileRepresentableIsPipeOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testFileRepresentableIsPipeOnNonExistingFile(), selectorName = testFileRepresentableIsPipeOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRerpesentableIsPipeOnSymbolicLink(), selectorName = testPathRerpesentableIsPipeOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRepresentableIsPipeOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsPipeOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:], Method: name = testPathRerpesentableIsPipeOnBadSymbolicLink(), selectorName = testPathRerpesentableIsPipeOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsPipeTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsPipeOnExistingFile", testIsPipeOnExistingFile),
            ("testIsPipeOnExistingDirectory", testIsPipeOnExistingDirectory),
            ("testIsPipeOnNonExistingPath", testIsPipeOnNonExistingPath),
            ("testIsPipeOnSymbolicLink", testIsPipeOnSymbolicLink),
            ("testIsPipeOnSymbolicDirectoryLink", testIsPipeOnSymbolicDirectoryLink),
            ("testIsPipeOnBadSymbolicLink", testIsPipeOnBadSymbolicLink),
            ("testFileRepresentableIsPipeOnExistingFile", testFileRepresentableIsPipeOnExistingFile),
            ("testFileRepresentableIsPipeOnExistingDirectory", testFileRepresentableIsPipeOnExistingDirectory),
            ("testFileRepresentableIsPipeOnNonExistingFile", testFileRepresentableIsPipeOnNonExistingFile),
            ("testPathRerpesentableIsPipeOnSymbolicLink", testPathRerpesentableIsPipeOnSymbolicLink),
            ("testPathRepresentableIsPipeOnSymbolicDirectoryLink", testPathRepresentableIsPipeOnSymbolicDirectoryLink),
            ("testPathRerpesentableIsPipeOnBadSymbolicLink", testPathRerpesentableIsPipeOnBadSymbolicLink),
        ]
    }
}
extension IsSocketTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsSocketTests, isGeneric = false, localName = IsSocketTests, variables = [], methods = [Method: name = testIsSocketOnExistingFile(), selectorName = testIsSocketOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnExistingDirectory(), selectorName = testIsSocketOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnNonExistingPath(), selectorName = testIsSocketOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnSymbolicLink(), selectorName = testIsSocketOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnSymbolicDirectoryLink(), selectorName = testIsSocketOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnBadSymbolicLink(), selectorName = testIsSocketOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnExistingFile(), selectorName = testFileRepresentableIsSocketOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnExistingDirectory(), selectorName = testFileRepresentableIsSocketOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnNonExistingFile(), selectorName = testFileRepresentableIsSocketOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRerpesentableIsSocketOnSymbolicLink(), selectorName = testPathRerpesentableIsSocketOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRepresentableIsSocketOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsSocketOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRerpesentableIsSocketOnBadSymbolicLink(), selectorName = testPathRerpesentableIsSocketOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsSocketOnExistingFile(), selectorName = testIsSocketOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnExistingDirectory(), selectorName = testIsSocketOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnNonExistingPath(), selectorName = testIsSocketOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnSymbolicLink(), selectorName = testIsSocketOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnSymbolicDirectoryLink(), selectorName = testIsSocketOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testIsSocketOnBadSymbolicLink(), selectorName = testIsSocketOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnExistingFile(), selectorName = testFileRepresentableIsSocketOnExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnExistingDirectory(), selectorName = testFileRepresentableIsSocketOnExistingDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testFileRepresentableIsSocketOnNonExistingFile(), selectorName = testFileRepresentableIsSocketOnNonExistingFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRerpesentableIsSocketOnSymbolicLink(), selectorName = testPathRerpesentableIsSocketOnSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRepresentableIsSocketOnSymbolicDirectoryLink(), selectorName = testPathRepresentableIsSocketOnSymbolicDirectoryLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:], Method: name = testPathRerpesentableIsSocketOnBadSymbolicLink(), selectorName = testPathRerpesentableIsSocketOnBadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSocketTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsSocketOnExistingFile", testIsSocketOnExistingFile),
            ("testIsSocketOnExistingDirectory", testIsSocketOnExistingDirectory),
            ("testIsSocketOnNonExistingPath", testIsSocketOnNonExistingPath),
            ("testIsSocketOnSymbolicLink", testIsSocketOnSymbolicLink),
            ("testIsSocketOnSymbolicDirectoryLink", testIsSocketOnSymbolicDirectoryLink),
            ("testIsSocketOnBadSymbolicLink", testIsSocketOnBadSymbolicLink),
            ("testFileRepresentableIsSocketOnExistingFile", testFileRepresentableIsSocketOnExistingFile),
            ("testFileRepresentableIsSocketOnExistingDirectory", testFileRepresentableIsSocketOnExistingDirectory),
            ("testFileRepresentableIsSocketOnNonExistingFile", testFileRepresentableIsSocketOnNonExistingFile),
            ("testPathRerpesentableIsSocketOnSymbolicLink", testPathRerpesentableIsSocketOnSymbolicLink),
            ("testPathRepresentableIsSocketOnSymbolicDirectoryLink", testPathRepresentableIsSocketOnSymbolicDirectoryLink),
            ("testPathRerpesentableIsSocketOnBadSymbolicLink", testPathRerpesentableIsSocketOnBadSymbolicLink),
        ]
    }
}
extension IsSymbolicLinkTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = IsSymbolicLinkTests, isGeneric = false, localName = IsSymbolicLinkTests, variables = [], methods = [Method: name = testIsSymbolicLinkOnFile(), selectorName = testIsSymbolicLinkOnFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnDirectory(), selectorName = testIsSymbolicLinkOnDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnNonExistingPath(), selectorName = testIsSymbolicLinkOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnGoodFileSymbol(), selectorName = testIsSymbolicLinkOnGoodFileSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnGoodDirectorySymbol(), selectorName = testIsSymbolicLinkOnGoodDirectorySymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnBadSymbol(), selectorName = testIsSymbolicLinkOnBadSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnFile(), selectorName = testPathRepresentableIsSymbolicLinkOnFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnDirectory(), selectorName = testPathRepresentableIsSymbolicLinkOnDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnNonExistingPath(), selectorName = testPathRepresentableIsSymbolicLinkOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnGoodFileSymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnGoodFileSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnBadSymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnBadSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testIsSymbolicLinkOnFile(), selectorName = testIsSymbolicLinkOnFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnDirectory(), selectorName = testIsSymbolicLinkOnDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnNonExistingPath(), selectorName = testIsSymbolicLinkOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnGoodFileSymbol(), selectorName = testIsSymbolicLinkOnGoodFileSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnGoodDirectorySymbol(), selectorName = testIsSymbolicLinkOnGoodDirectorySymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testIsSymbolicLinkOnBadSymbol(), selectorName = testIsSymbolicLinkOnBadSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnFile(), selectorName = testPathRepresentableIsSymbolicLinkOnFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnDirectory(), selectorName = testPathRepresentableIsSymbolicLinkOnDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnNonExistingPath(), selectorName = testPathRepresentableIsSymbolicLinkOnNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnGoodFileSymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnGoodFileSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:], Method: name = testPathRepresentableIsSymbolicLinkOnBadSymbol(), selectorName = testPathRepresentableIsSymbolicLinkOnBadSymbol, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(IsSymbolicLinkTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testIsSymbolicLinkOnFile", testIsSymbolicLinkOnFile),
            ("testIsSymbolicLinkOnDirectory", testIsSymbolicLinkOnDirectory),
            ("testIsSymbolicLinkOnNonExistingPath", testIsSymbolicLinkOnNonExistingPath),
            ("testIsSymbolicLinkOnGoodFileSymbol", testIsSymbolicLinkOnGoodFileSymbol),
            ("testIsSymbolicLinkOnGoodDirectorySymbol", testIsSymbolicLinkOnGoodDirectorySymbol),
            ("testIsSymbolicLinkOnBadSymbol", testIsSymbolicLinkOnBadSymbol),
            ("testPathRepresentableIsSymbolicLinkOnFile", testPathRepresentableIsSymbolicLinkOnFile),
            ("testPathRepresentableIsSymbolicLinkOnDirectory", testPathRepresentableIsSymbolicLinkOnDirectory),
            ("testPathRepresentableIsSymbolicLinkOnNonExistingPath", testPathRepresentableIsSymbolicLinkOnNonExistingPath),
            ("testPathRepresentableIsSymbolicLinkOnGoodFileSymbol", testPathRepresentableIsSymbolicLinkOnGoodFileSymbol),
            ("testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol", testPathRepresentableIsSymbolicLinkOnGoodDirectorySymbol),
            ("testPathRepresentableIsSymbolicLinkOnBadSymbol", testPathRepresentableIsSymbolicLinkOnBadSymbol),
        ]
    }
}
extension JoinPathTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = JoinPathTests, isGeneric = false, localName = JoinPathTests, variables = [], methods = [Method: name = testSimpleSingleJoining(), selectorName = testSimpleSingleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testMultipleJoining(), selectorName = testMultipleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testMultipleJoiningWithTrailingSeparators(), selectorName = testMultipleJoiningWithTrailingSeparators, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testJoiningWithAbsolutePath(), selectorName = testJoiningWithAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableSimpleSingleJoining(), selectorName = testPathRepresentableSimpleSingleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableMultipleJoining(), selectorName = testPathRepresentableMultipleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableMultipleJoiningWithTrailingSeparators(), selectorName = testPathRepresentableMultipleJoiningWithTrailingSeparators, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableJoiningWithAbsolutePath(), selectorName = testPathRepresentableJoiningWithAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testSimpleSingleJoining(), selectorName = testSimpleSingleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testMultipleJoining(), selectorName = testMultipleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testMultipleJoiningWithTrailingSeparators(), selectorName = testMultipleJoiningWithTrailingSeparators, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testJoiningWithAbsolutePath(), selectorName = testJoiningWithAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableSimpleSingleJoining(), selectorName = testPathRepresentableSimpleSingleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableMultipleJoining(), selectorName = testPathRepresentableMultipleJoining, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableMultipleJoiningWithTrailingSeparators(), selectorName = testPathRepresentableMultipleJoiningWithTrailingSeparators, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:], Method: name = testPathRepresentableJoiningWithAbsolutePath(), selectorName = testPathRepresentableJoiningWithAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(JoinPathTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testSimpleSingleJoining", testSimpleSingleJoining),
            ("testMultipleJoining", testMultipleJoining),
            ("testMultipleJoiningWithTrailingSeparators", testMultipleJoiningWithTrailingSeparators),
            ("testJoiningWithAbsolutePath", testJoiningWithAbsolutePath),
            ("testPathRepresentableSimpleSingleJoining", testPathRepresentableSimpleSingleJoining),
            ("testPathRepresentableMultipleJoining", testPathRepresentableMultipleJoining),
            ("testPathRepresentableMultipleJoiningWithTrailingSeparators", testPathRepresentableMultipleJoiningWithTrailingSeparators),
            ("testPathRepresentableJoiningWithAbsolutePath", testPathRepresentableJoiningWithAbsolutePath),
        ]
    }
}
extension MakeAbsoluteTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = MakeAbsoluteTests, isGeneric = false, localName = MakeAbsoluteTests, variables = [], methods = [Method: name = testMakeAbsolutePath(), selectorName = testMakeAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(MakeAbsoluteTests), attributes = [:], Method: name = testPathRepresentableMakeAbsolutePath(), selectorName = testPathRepresentableMakeAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(MakeAbsoluteTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testMakeAbsolutePath(), selectorName = testMakeAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(MakeAbsoluteTests), attributes = [:], Method: name = testPathRepresentableMakeAbsolutePath(), selectorName = testPathRepresentableMakeAbsolutePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(MakeAbsoluteTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testMakeAbsolutePath", testMakeAbsolutePath),
            ("testPathRepresentableMakeAbsolutePath", testPathRepresentableMakeAbsolutePath),
        ]
    }
}
extension NormalizePathTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = NormalizePathTests, isGeneric = false, localName = NormalizePathTests, variables = [], methods = [Method: name = testAssertEmptyPathBecomesCurrent(), selectorName = testAssertEmptyPathBecomesCurrent, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testSlashPrefixes(), selectorName = testSlashPrefixes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testConanicalizePath(), selectorName = testConanicalizePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableEmptyPathBecomesCurrent(), selectorName = testPathRepresentableEmptyPathBecomesCurrent, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableSlashPrefixes(), selectorName = testPathRepresentableSlashPrefixes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableConanicalizePath(), selectorName = testPathRepresentableConanicalizePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testAssertEmptyPathBecomesCurrent(), selectorName = testAssertEmptyPathBecomesCurrent, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testSlashPrefixes(), selectorName = testSlashPrefixes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testConanicalizePath(), selectorName = testConanicalizePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableEmptyPathBecomesCurrent(), selectorName = testPathRepresentableEmptyPathBecomesCurrent, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableSlashPrefixes(), selectorName = testPathRepresentableSlashPrefixes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:], Method: name = testPathRepresentableConanicalizePath(), selectorName = testPathRepresentableConanicalizePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(NormalizePathTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testAssertEmptyPathBecomesCurrent", testAssertEmptyPathBecomesCurrent),
            ("testSlashPrefixes", testSlashPrefixes),
            ("testConanicalizePath", testConanicalizePath),
            ("testPathRepresentableEmptyPathBecomesCurrent", testPathRepresentableEmptyPathBecomesCurrent),
            ("testPathRepresentableSlashPrefixes", testPathRepresentableSlashPrefixes),
            ("testPathRepresentableConanicalizePath", testPathRepresentableConanicalizePath),
        ]
    }
}
extension PathBaseNameTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = PathBaseNameTests, isGeneric = false, localName = PathBaseNameTests, variables = [], methods = [Method: name = testBaseNameOfPath(), selectorName = testBaseNameOfPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathBaseNameTests), attributes = [:], Method: name = testPathRepresentableBaseNameOfPath(), selectorName = testPathRepresentableBaseNameOfPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathBaseNameTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testBaseNameOfPath(), selectorName = testBaseNameOfPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathBaseNameTests), attributes = [:], Method: name = testPathRepresentableBaseNameOfPath(), selectorName = testPathRepresentableBaseNameOfPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathBaseNameTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testBaseNameOfPath", testBaseNameOfPath),
            ("testPathRepresentableBaseNameOfPath", testPathRepresentableBaseNameOfPath),
        ]
    }
}
extension PathDirectoryTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = PathDirectoryTests, isGeneric = false, localName = PathDirectoryTests, variables = [], methods = [Method: name = testPathDirectory(), selectorName = testPathDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathDirectoryTests), attributes = [:], Method: name = testPathRepresentableDirectory(), selectorName = testPathRepresentableDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathDirectoryTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testPathDirectory(), selectorName = testPathDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathDirectoryTests), attributes = [:], Method: name = testPathRepresentableDirectory(), selectorName = testPathRepresentableDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathDirectoryTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testPathDirectory", testPathDirectory),
            ("testPathRepresentableDirectory", testPathRepresentableDirectory),
        ]
    }
}
extension PathTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = PathTests, isGeneric = false, localName = PathTests, variables = [], methods = [Method: name = testPathValueDoesNotChange(), selectorName = testPathValueDoesNotChange, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testPathValueDoesNotChange(), selectorName = testPathValueDoesNotChange, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(PathTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testPathValueDoesNotChange", testPathValueDoesNotChange),
        ]
    }
}
extension ReadingTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = ReadingTests, isGeneric = false, localName = ReadingTests, variables = [], methods = [Method: name = testReadString(), selectorName = testReadString, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadBytes(), selectorName = testReadBytes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadStringFromDirectory(), selectorName = testReadStringFromDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadStringFromNoWhere(), selectorName = testReadStringFromNoWhere, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadSymbolicLink(), selectorName = testReadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadString(), selectorName = testPathRepresentableReadString, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadBytes(), selectorName = testPathRepresentableReadBytes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadStringFromDirectory(), selectorName = testPathRepresentableReadStringFromDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadStringFromNoWhere(), selectorName = testPathRepresentableReadStringFromNoWhere, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadSymbolicLink(), selectorName = testPathRepresentableReadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testReadString(), selectorName = testReadString, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadBytes(), selectorName = testReadBytes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadStringFromDirectory(), selectorName = testReadStringFromDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadStringFromNoWhere(), selectorName = testReadStringFromNoWhere, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testReadSymbolicLink(), selectorName = testReadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadString(), selectorName = testPathRepresentableReadString, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadBytes(), selectorName = testPathRepresentableReadBytes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadStringFromDirectory(), selectorName = testPathRepresentableReadStringFromDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadStringFromNoWhere(), selectorName = testPathRepresentableReadStringFromNoWhere, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:], Method: name = testPathRepresentableReadSymbolicLink(), selectorName = testPathRepresentableReadSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(ReadingTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testReadString", testReadString),
            ("testReadBytes", testReadBytes),
            ("testReadStringFromDirectory", testReadStringFromDirectory),
            ("testReadStringFromNoWhere", testReadStringFromNoWhere),
            ("testReadSymbolicLink", testReadSymbolicLink),
            ("testPathRepresentableReadString", testPathRepresentableReadString),
            ("testPathRepresentableReadBytes", testPathRepresentableReadBytes),
            ("testPathRepresentableReadStringFromDirectory", testPathRepresentableReadStringFromDirectory),
            ("testPathRepresentableReadStringFromNoWhere", testPathRepresentableReadStringFromNoWhere),
            ("testPathRepresentableReadSymbolicLink", testPathRepresentableReadSymbolicLink),
        ]
    }
}
extension SameFileTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = SameFileTests, isGeneric = false, localName = SameFileTests, variables = [], methods = [Method: name = testSameFileAsSymbolicLink(), selectorName = testSameFileAsSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testNotSameFile(), selectorName = testNotSameFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testPathRepresentableSameFileAsSymbolicLink(), selectorName = testPathRepresentableSameFileAsSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testPathRepresentableNotSameFile(), selectorName = testPathRepresentableNotSameFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testSameFileAsSymbolicLink(), selectorName = testSameFileAsSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testNotSameFile(), selectorName = testNotSameFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testPathRepresentableSameFileAsSymbolicLink(), selectorName = testPathRepresentableSameFileAsSymbolicLink, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:], Method: name = testPathRepresentableNotSameFile(), selectorName = testPathRepresentableNotSameFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SameFileTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testSameFileAsSymbolicLink", testSameFileAsSymbolicLink),
            ("testNotSameFile", testNotSameFile),
            ("testPathRepresentableSameFileAsSymbolicLink", testPathRepresentableSameFileAsSymbolicLink),
            ("testPathRepresentableNotSameFile", testPathRepresentableNotSameFile),
        ]
    }
}
extension SizeTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = SizeTests, isGeneric = false, localName = SizeTests, variables = [], methods = [Method: name = testSizeOfRegularFile(), selectorName = testSizeOfRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfSymbolToRegularFile(), selectorName = testSizeOfSymbolToRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfDirectory(), selectorName = testSizeOfDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfSymbolToDirectory(), selectorName = testSizeOfSymbolToDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfNonExistingPath(), selectorName = testSizeOfNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfRegularFile(), selectorName = testPathRepresentableSizeOfRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfSymbolToRegularFile(), selectorName = testPathRepresentableSizeOfSymbolToRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfDirectory(), selectorName = testPathRepresentableSizeOfDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfSymbolToDirectory(), selectorName = testPathRepresentableSizeOfSymbolToDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfNonExistingPath(), selectorName = testPathRepresentableSizeOfNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = testSizeOfRegularFile(), selectorName = testSizeOfRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfSymbolToRegularFile(), selectorName = testSizeOfSymbolToRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfDirectory(), selectorName = testSizeOfDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfSymbolToDirectory(), selectorName = testSizeOfSymbolToDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testSizeOfNonExistingPath(), selectorName = testSizeOfNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfRegularFile(), selectorName = testPathRepresentableSizeOfRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfSymbolToRegularFile(), selectorName = testPathRepresentableSizeOfSymbolToRegularFile, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfDirectory(), selectorName = testPathRepresentableSizeOfDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfSymbolToDirectory(), selectorName = testPathRepresentableSizeOfSymbolToDirectory, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:], Method: name = testPathRepresentableSizeOfNonExistingPath(), selectorName = testPathRepresentableSizeOfNonExistingPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SizeTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["FixtureTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testSizeOfRegularFile", testSizeOfRegularFile),
            ("testSizeOfSymbolToRegularFile", testSizeOfSymbolToRegularFile),
            ("testSizeOfDirectory", testSizeOfDirectory),
            ("testSizeOfSymbolToDirectory", testSizeOfSymbolToDirectory),
            ("testSizeOfNonExistingPath", testSizeOfNonExistingPath),
            ("testPathRepresentableSizeOfRegularFile", testPathRepresentableSizeOfRegularFile),
            ("testPathRepresentableSizeOfSymbolToRegularFile", testPathRepresentableSizeOfSymbolToRegularFile),
            ("testPathRepresentableSizeOfDirectory", testPathRepresentableSizeOfDirectory),
            ("testPathRepresentableSizeOfSymbolToDirectory", testPathRepresentableSizeOfSymbolToDirectory),
            ("testPathRepresentableSizeOfNonExistingPath", testPathRepresentableSizeOfNonExistingPath),
        ]
    }
}
extension SplitExtensionTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = SplitExtensionTests, isGeneric = false, localName = SplitExtensionTests, variables = [], methods = [Method: name = _testSplitExtension(_ path: String, _ filename: String, _ fileExtension: String,                             file: StaticString = #file, line: UInt = #line), selectorName = _testSplitExtension(_:_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = filename, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = fileExtension, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = _testPathRepresentableSplitExtension(_ path: String, _ filename: String, _ fileExtension: String,                                              file: StaticString = #file, line: UInt = #line), selectorName = _testPathRepresentableSplitExtension(_:_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = filename, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = fileExtension, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnSimplePath(), selectorName = testSplitExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithMultipleDots(), selectorName = testSplitExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDot(), selectorName = testSplitExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithNoDots(), selectorName = testSplitExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testSplitExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testSplitExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testSplitExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDots(), selectorName = testSplitExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithOnlyDots(), selectorName = testSplitExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnEmptyPath(), selectorName = testSplitExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnSimplePath(), selectorName = testPathRepresentableSplitExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithMultipleDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDot(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithNoDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithOnlyDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnEmptyPath(), selectorName = testPathRepresentableSplitExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = _testSplitExtension(_ path: String, _ filename: String, _ fileExtension: String,                             file: StaticString = #file, line: UInt = #line), selectorName = _testSplitExtension(_:_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = filename, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = fileExtension, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = _testPathRepresentableSplitExtension(_ path: String, _ filename: String, _ fileExtension: String,                                              file: StaticString = #file, line: UInt = #line), selectorName = _testPathRepresentableSplitExtension(_:_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = filename, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = fileExtension, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnSimplePath(), selectorName = testSplitExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithMultipleDots(), selectorName = testSplitExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDot(), selectorName = testSplitExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithNoDots(), selectorName = testSplitExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testSplitExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testSplitExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testSplitExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithLeadingDots(), selectorName = testSplitExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnPathWithOnlyDots(), selectorName = testSplitExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testSplitExtensionOnEmptyPath(), selectorName = testSplitExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnSimplePath(), selectorName = testPathRepresentableSplitExtensionOnSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithMultipleDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithMultipleDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDot(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDot, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithNoDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithNoDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithLeadingDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithLeadingDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnPathWithOnlyDots(), selectorName = testPathRepresentableSplitExtensionOnPathWithOnlyDots, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:], Method: name = testPathRepresentableSplitExtensionOnEmptyPath(), selectorName = testPathRepresentableSplitExtensionOnEmptyPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitExtensionTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testSplitExtensionOnSimplePath", testSplitExtensionOnSimplePath),
            ("testSplitExtensionOnPathWithMultipleDots", testSplitExtensionOnPathWithMultipleDots),
            ("testSplitExtensionOnPathWithLeadingDot", testSplitExtensionOnPathWithLeadingDot),
            ("testSplitExtensionOnPathWithNoDots", testSplitExtensionOnPathWithNoDots),
            ("testSplitExtensionOnPathWithLeadingDotButNoExtension", testSplitExtensionOnPathWithLeadingDotButNoExtension),
            ("testSplitExtensionOnPathWithManyLeadingDotsButNoExtension", testSplitExtensionOnPathWithManyLeadingDotsButNoExtension),
            ("testSplitExtensionOnPathWithLeadingDotsButNoExtension", testSplitExtensionOnPathWithLeadingDotsButNoExtension),
            ("testSplitExtensionOnPathWithLeadingDots", testSplitExtensionOnPathWithLeadingDots),
            ("testSplitExtensionOnPathWithOnlyDots", testSplitExtensionOnPathWithOnlyDots),
            ("testSplitExtensionOnEmptyPath", testSplitExtensionOnEmptyPath),
            ("testPathRepresentableSplitExtensionOnSimplePath", testPathRepresentableSplitExtensionOnSimplePath),
            ("testPathRepresentableSplitExtensionOnPathWithMultipleDots", testPathRepresentableSplitExtensionOnPathWithMultipleDots),
            ("testPathRepresentableSplitExtensionOnPathWithLeadingDot", testPathRepresentableSplitExtensionOnPathWithLeadingDot),
            ("testPathRepresentableSplitExtensionOnPathWithNoDots", testPathRepresentableSplitExtensionOnPathWithNoDots),
            ("testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension", testPathRepresentableSplitExtensionOnPathWithLeadingDotButNoExtension),
            ("testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension", testPathRepresentableSplitExtensionOnPathWithManyLeadingDotsButNoExtension),
            ("testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension", testPathRepresentableSplitExtensionOnPathWithLeadingDotsButNoExtension),
            ("testPathRepresentableSplitExtensionOnPathWithLeadingDots", testPathRepresentableSplitExtensionOnPathWithLeadingDots),
            ("testPathRepresentableSplitExtensionOnPathWithOnlyDots", testPathRepresentableSplitExtensionOnPathWithOnlyDots),
            ("testPathRepresentableSplitExtensionOnEmptyPath", testPathRepresentableSplitExtensionOnEmptyPath),
        ]
    }
}
extension SplitPathTests {
    static var allx: [(String, (Class: module = nil, typealiases = [:], isExtension = false, kind = class, accessLevel = internal, name = SplitPathTests, isGeneric = false, localName = SplitPathTests, variables = [], methods = [Method: name = _testSplitPath(_ path: String, _ expected: (String, String), file: StaticString = #file,                        line: UInt = #line), selectorName = _testSplitPath(_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = expected, typeName = (String, String), `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = _testPathRepresentableSplit(_ path: String, _ expected: (String, String), file: StaticString = #file,                                     line: UInt = #line), selectorName = _testPathRepresentableSplit(_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = expected, typeName = (String, String), `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitSimplePath(), selectorName = testSplitSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitRootPath(), selectorName = testSplitRootPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitSingleCompomentPath(), selectorName = testSplitSingleCompomentPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitWithABunchOfPrefixSlashes(), selectorName = testSplitWithABunchOfPrefixSlashes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitWithRedundantSeparator(), selectorName = testSplitWithRedundantSeparator, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitSimplePath(), selectorName = testPathRepresentableSplitSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitRootPath(), selectorName = testPathRepresentableSplitRootPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitSingleCompomentPath(), selectorName = testPathRepresentableSplitSingleCompomentPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitWithABunchOfPrefixSlashes(), selectorName = testPathRepresentableSplitWithABunchOfPrefixSlashes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitWithRedundantSeparator(), selectorName = testPathRepresentableSplitWithRedundantSeparator, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:]], subscripts = [], initializers = [], annotations = [:], staticVariables = [], staticMethods = [], classMethods = [], instanceVariables = [], instanceMethods = [Method: name = _testSplitPath(_ path: String, _ expected: (String, String), file: StaticString = #file,                        line: UInt = #line), selectorName = _testSplitPath(_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = expected, typeName = (String, String), `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = _testPathRepresentableSplit(_ path: String, _ expected: (String, String), file: StaticString = #file,                                     line: UInt = #line), selectorName = _testPathRepresentableSplit(_:_:file:line:), parameters = [MethodParameter: argumentLabel = nil, name = path, typeName = String, `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = nil, name = expected, typeName = (String, String), `inout` = false, typeAttributes = [:], defaultValue = nil, annotations = [:], MethodParameter: argumentLabel = Optional("file"), name = file, typeName = StaticString, `inout` = false, typeAttributes = [:], defaultValue = Optional("#file"), annotations = [:], MethodParameter: argumentLabel = Optional("line"), name = line, typeName = UInt, `inout` = false, typeAttributes = [:], defaultValue = Optional("#line"), annotations = [:]], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitSimplePath(), selectorName = testSplitSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitRootPath(), selectorName = testSplitRootPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitSingleCompomentPath(), selectorName = testSplitSingleCompomentPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitWithABunchOfPrefixSlashes(), selectorName = testSplitWithABunchOfPrefixSlashes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testSplitWithRedundantSeparator(), selectorName = testSplitWithRedundantSeparator, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitSimplePath(), selectorName = testPathRepresentableSplitSimplePath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitRootPath(), selectorName = testPathRepresentableSplitRootPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitSingleCompomentPath(), selectorName = testPathRepresentableSplitSingleCompomentPath, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitWithABunchOfPrefixSlashes(), selectorName = testPathRepresentableSplitWithABunchOfPrefixSlashes, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:], Method: name = testPathRepresentableSplitWithRedundantSeparator(), selectorName = testPathRepresentableSplitWithRedundantSeparator, parameters = [], returnTypeName = Void, `throws` = false, `rethrows` = false, accessLevel = internal, isStatic = false, isClass = false, isFailableInitializer = false, annotations = [:], definedInTypeName = Optional(SplitPathTests), attributes = [:]], computedVariables = [], storedVariables = [], inheritedTypes = ["XCTestCase"], containedTypes = [], parentName = nil, parentTypes = AnyIterator<Type>(_box: Swift._IteratorBox<Swift._ClosureBasedIterator<SourceryRuntime.Type>>), attributes = ["final": final], kind = class, isFinal = true) -> () -> Void)] {
        return [
            ("testSplitSimplePath", testSplitSimplePath),
            ("testSplitRootPath", testSplitRootPath),
            ("testSplitSingleCompomentPath", testSplitSingleCompomentPath),
            ("testSplitWithABunchOfPrefixSlashes", testSplitWithABunchOfPrefixSlashes),
            ("testSplitWithRedundantSeparator", testSplitWithRedundantSeparator),
            ("testPathRepresentableSplitSimplePath", testPathRepresentableSplitSimplePath),
            ("testPathRepresentableSplitRootPath", testPathRepresentableSplitRootPath),
            ("testPathRepresentableSplitSingleCompomentPath", testPathRepresentableSplitSingleCompomentPath),
            ("testPathRepresentableSplitWithABunchOfPrefixSlashes", testPathRepresentableSplitWithABunchOfPrefixSlashes),
            ("testPathRepresentableSplitWithRedundantSeparator", testPathRepresentableSplitWithRedundantSeparator),
        ]
    }
}

XCTMain([
    testCase(ChildrenTests.allx),
    testCase(ExistsTest.allx),
    testCase(ExpandUserDirectoryTests.allx),
    testCase(FileExtensionTests.allx),
    testCase(FixtureTestCase.allx),
    testCase(IsAbsoluteTests.allx),
    testCase(IsBlockDeviceTests.allx),
    testCase(IsCharacterDeviceTests.allx),
    testCase(IsDirectoryTests.allx),
    testCase(IsFileTests.allx),
    testCase(IsPipeTests.allx),
    testCase(IsSocketTests.allx),
    testCase(IsSymbolicLinkTests.allx),
    testCase(JoinPathTests.allx),
    testCase(MakeAbsoluteTests.allx),
    testCase(NormalizePathTests.allx),
    testCase(PathBaseNameTests.allx),
    testCase(PathDirectoryTests.allx),
    testCase(PathTests.allx),
    testCase(ReadingTests.allx),
    testCase(SameFileTests.allx),
    testCase(SizeTests.allx),
    testCase(SplitExtensionTests.allx),
    testCase(SplitPathTests.allx),
])
